{
    // JSHint Default Configuration File (as on JSHint website)
    // See the following for more details:
    // - https://github.com/jshint/jshint/blob/2.x/src/jshint.js      - most current 2.x branch jshint.js
    // - http://www.jshint.com/docs/options/                          - posted documentation


    // ENFORCING - When set to true, will produce more warnings

    "bitwise"       : true,     // true: Prohibit bitwise operators (&, |, ^, etc.)
    "camelcase"     : false,    // true: Identifiers must be in camelCase
    "curly"         : true,     // true: Require {} for every new block or scope
    "eqeqeq"        : true,     // true: Require triple equals (===) for comparison
    "forin"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()
    "freeze"        : true,     // true: if modifying native object prototypes should be disallowed
    "immed"         : false,    // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
    "indent"        : 4,        // {int} Number of spaces to use for indentation
    "latedef"       : false,    // true: Require variables/functions to be defined before being used
    "maxcomplexity" : false,    // {int} Max cyclomatic complexity per function
    "maxdepth"      : false,    // {int} Max depth of nested blocks (within functions)
    "maxerr"        : 50,       // {int} Maximum error before stopping
    "maxlen"        : false,    // {int} Max number of characters per line
    "maxparams"     : false,    // {int} Max number of formal params allowed per function
    "maxstatements" : false,    // {int} Max number statements per function
    "newcap"        : false,    // true: Require capitalization of all constructor functions e.g. `new F()`
    "noarg"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`
    "noempty"       : true,     // true: Prohibit use of empty blocks
    "nonew"         : false,    // true: Prohibit use of constructors for side-effects (without assignment)
    "plusplus"      : false,    // true: Prohibit use of `++` & `--`
    "quotmark"      : false,    // Quotation mark consistency:
                                //   false    : do nothing (default)
                                //   true     : ensure whatever is used is consistent
                                //   "single" : require single quotes
                                //   "double" : require double quotes
    "strict"        : true,     // true: Requires all functions run in ES5 Strict Mode
    "undef"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)
    "unused"        : true,     // warn if variables are unused. Available options:
                                //   false    - don't check for unused variables
                                //   true     - "vars" + check last function param
                                //   "vars"   - skip checking unused function params
                                //   "strict" - "vars" + check all function params


    // RELAXING - When set to true, will produce less warnings

    "asi"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)
    "boss"          : false,     // true: Tolerate assignments where comparisons would be expected
    "debug"         : false,     // true: Allow debugger statements e.g. browser breakpoints.
    "eqnull"        : false,     // true: Tolerate use of `== null`
    "es3"           : false,     // true: if ES3 syntax should be allowed
    "es5"           : false,     // true: Allow ES5 syntax (ex: getters and setters)
    "esnext"        : false,     // true: Allow ES.next (ES6) syntax (ex: `const`)
    "evil"          : false,     // true: Tolerate use of `eval` and `new Function()`
    "expr"          : false,     // true: Tolerate `ExpressionStatement` as Programs
    "funcscope"     : false,     // true: Tolerate defining variables inside control statements"
    "globalstrict"  : false,     // true: Allow global "use strict" (also enables 'strict')
    "iterator"      : false,     // true: Tolerate using the `__iterator__` property
    "lastsemic"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block
    "laxbreak"      : false,     // true: Tolerate possibly unsafe line breakings
    "laxcomma"      : false,     // true: Tolerate comma-first style coding
    "loopfunc"      : false,     // true: Tolerate functions being defined in loops
    "moz"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)
                                 // (ex: `for each`, multiple try/catch, function expressionâ€¦)
    "multistr"      : false,     // true: Tolerate multi-line strings
    "notypeof"      : false,     // if should report typos in typeof comparisons
    "noyield"       : false,     // allow generators without a yield
    "proto"         : false,     // true: Tolerate using the `__proto__` property
    "scripturl"     : false,     // true: Tolerate script-targeted URLs
    "shadow"        : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
    "sub"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation
    "supernew"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`
    "validthis"     : false,     // true: Tolerate using this in a non-constructor function
    "withstmt"      : false      // if with statements should be allowed


    // ENVIRONMENTS

    "browser"       : true,     // Web Browser (window, document, etc)
    "couch"         : false,    // CouchDB
    "devel"         : true,     // Development/debugging (alert, confirm, etc)
    "dojo"          : false,    // Dojo Toolkit
    "jasmine"       : false,    // Jasmine functions should be predefined
    "jquery"        : false,    // jQuery
    "mocha"         : false,    // Mocha functions should be predefined
    "mootools"      : false,    // MooTools
    "node"          : false,    // Node.js
    "nonstandard"   : false,    // Widely adopted globals (escape, unescape, etc)
    "phantom"       : false,    // if PhantomJS symbols should be allowed
    "prototypejs"   : false,    // Prototype and Scriptaculous
    "qunit"         : false,    // if the QUnit environment globals should be predefined
    "rhino"         : false,    // Rhino
    "shelljs"       : false,    // if ShellJS globals should be predefined
    "typed"         : false,    // if typed array globals should be predefined
    "worker"        : false,    // Web Workers
    "wsh"           : false,    // Windows Scripting Host
    "yui"           : false,    // Yahoo User Interface


    // LEGACY - Do not use

    "gcl"           : true,     // google closure compiler compatible
    "nomen"         : true,     // disallows dangling _ in variables
    "onevar"        : true,     // one var statement per function
    "passfail"      : true,     // stop hinting on first failure
    "smarttabs"     : true,     // suppress warnings about mixed tabs and spaces
    "trailing"      : true,     // disallows trailing whitespace on lines
    "white"         : true,     // check against mostly undocumented whitespace rules


    // OBSOLETE

    "onecase"       : true,      // if one case switch statements should be allowed
    "regexp"        : true,      // if the . should not be allowed in regexp literals
    "regexdash"     : true,      // if unescaped first/last dash (-) inside brackets should be tolerated


    // Custom Globals
    "globals"       : {}        // additional predefined global variables
}
